#######
########## IMPORTS
####

from fastapi.middleware.cors import CORSMiddleware
from cryptography.fernet import Fernet
from fastapi.responses import FileResponse, JSONResponse
from contextlib import asynccontextmanager
from supabase import create_client, Client
from pydantic import BaseModel, EmailStr
from security import hash_password, verify_password, set_session_cookie, delete_session_cookie, verify_session, gen_backup_key, generate_key, aes_encrypt_file, aes_decrypt_file
from datetime import datetime
from fastapi import FastAPI, HTTPException, Response, Request, UploadFile, File
from dotenv import load_dotenv
from typing import Optional, List
from pathlib import Path
from io import BytesIO
import shutil
import uuid
import os



#######
########## GLOBALS
####

load_dotenv()
SUPABASE_URL    = os.getenv('SUPABASE_URL')
SUPABASE_KEY    = os.getenv('SUPABASE_KEY')
DEFAULT_ALGO    = 'AES_256'
ALGOS           = [{'name': 'AES_256'}, {'name': 'ChaCha20'}]
UPLOADS_DIR     = Path("uploads")
TEMP_DIR        = Path("temp")



#######
########## SCHEMAS
####

class RegisterRequest(BaseModel):
    name: str
    email: EmailStr
    second_email: EmailStr
    password: str

class LoginRequest(BaseModel):
    email: EmailStr
    password: str

class SessionData(BaseModel):
    user_id: int

class User(BaseModel):
    id: int
    name: str
    email: EmailStr
    second_email: EmailStr
    password_hash: str
    # backup_key_hash: str # ez ne legyen benne a t√≠pusban, csak az adatb√°zisban
    algo: str
    has_key: bool
    key_number: int

class UploadRequest(BaseModel):
    encrypted: Optional[bool] = False
    force: Optional[bool] = False  # Ha igaz, √∫jranevezi a felt√∂lt√∂tt f√°jlt, aminek √ºtk√∂zik a neve

class AlgoChangeRequest(BaseModel):
    algo: str
    current_sk: Optional[str] = ""



#######
########## FUNCTIONS
####

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("‚úÖ Server: setup ready")

    yield 
    
    print("üõë Server: shutdown complete")

def is_email_taken(email: EmailStr) -> bool:
    #email keres√©se az adatb√°zisban
    response = supabase.table("user").select("id").eq("email", email).execute()
    return len(response.data) > 0 

def authenticate_user(session_token: str) -> int:
    #ha nincs session_token
    if not session_token or session_token=="":
        raise HTTPException(status_code=401, detail="Not authenticated")

    #session_token ellen≈ërz√©se
    session_data = verify_session(session_token)
    if not session_data:
        raise HTTPException(status_code=401, detail="Invalid or expired session")

    #session_token-hez tartoz√≥ user_id visszaad√°sa
    user_id = session_data["user_id"]
    return user_id

#chacha20
def encrypt_file(file_content: bytes, output_path: str, key_hex: str, algo: str):
    #kulcs √°talak√≠t√°sa
    key_bytes = bytes.fromhex(key_hex)

    #AES_256
    if algo == "AES_256":
        #f√°jl titkos√≠t√°sa √©s ment√©se az output_path-ra
        input_file = BytesIO(file_content)
        encrypted_file = aes_encrypt_file(input_file, key_bytes)
        with open(output_path, "wb") as f:
            shutil.copyfileobj(encrypted_file, f)
    
    #egy√©b algoritmus
    else:
        raise ValueError(f"Unsupported algorithm: {algo}")

    #log
    print(f"{output_path} encrypt sikeres.")

#van + chacha20
def decrypt_file(input_path: str, output_path: str, key_hex: str, algo: str):
    #kulcs √°talak√≠t√°sa
    key_bytes = bytes.fromhex(key_hex)

    #f√°jl megnyit√°sa az input_path-r√≥l 
    with open(input_path, "rb") as f:
        file_content = f.read()

    #f√°jl l√©tez√©s√©nek ellen≈ërz√©es

    #AES_256
    if algo == "AES_256":
        #f√°jl visszafejt√©se √©s ment√©se az output_path-ra
        decrypted_file = aes_decrypt_file(BytesIO(file_content), key_bytes)
        with open(output_path, "wb") as decrypted_f:
            decrypted_f.write(decrypted_file.read())
    
    #egy√©b algoritmus
    else:
        raise ValueError(f"Unsupported algorithm: {algo}")

    #log
    print(f"{input_path} ‚Üí {output_path} decrypt sikeres.")

def encrypt_user_files(user_id: str, key: str, files_to_encrypt: list, algo: str):
    #user mapp√°j√°nak ellen≈ërz√©se, ha kell l√©trehoz√°sa
    user_upload_dir = os.path.join(UPLOADS_DIR, user_id)
    os.makedirs(user_upload_dir, exist_ok=True)

    #f√°jlok feldolgoz√°sa
    for file in files_to_encrypt:
        #f√°jln√©v √©s √∫tvonalak meghat√°roz√°sa
        filename = file['uuid']
        input_path = os.path.join(TEMP_DIR, filename)
        output_path = os.path.join(user_upload_dir, filename)

        #f√°jl l√©tez√©s√©nek ellen≈ërz√©se
        if not os.path.exists(input_path):
            print(f"F√°jl nem tal√°lhat√≥: {input_path}, kihagyva.")
            continue

        #titkos√≠t√°s
        try:
            encrypt_file(input_path, output_path, key, algo)
            print(f"Sikeresen titkos√≠tva: {filename}")
        except Exception as e:
            print(f"Hiba a {filename} titkos√≠t√°sakor: {e}")

    #log
    print(f"Minden f√°jl titkos√≠tva ide: {user_upload_dir}")

def decrypt_user_files(user_id: str, key: str, encrypted_files: list, algo: str):
    #√°tmeneti mappa ellen≈ërz√©se, ha kell l√©trehoz√°sa
    os.makedirs(TEMP_DIR, exist_ok=True)

    #f√°jlok feldolgoz√°sa
    for file in encrypted_files:
        #f√°jln√©v √©s √∫tvonalak meghat√°roz√°sa
        filename = file['uuid']
        input_path = os.path.join(UPLOADS_DIR, user_id, filename)
        output_path = os.path.join(TEMP_DIR, filename)

        #f√°jl l√©tez√©s√©nek ellen≈ërz√©se
        if not os.path.exists(input_path):
            print(f"F√°jl nem tal√°lhat√≥: {input_path}, kihagyva.")
            continue

        #visszafejt√©s
        try:
            decrypt_file(input_path, output_path, key, algo)
            print(f"Sikeresen kititkos√≠tva: {filename}")
        except Exception as e:
            print(f"Hiba a {filename} kititkos√≠t√°sakor: {e}")

    #log
    print(f"Minden f√°jl kititkos√≠tva ide: {TEMP_DIR}")



#######
########## SETUP
####

app = FastAPI(lifespan=lifespan)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)



#######
########## ROUTES
####

@app.get("/")
async def root():
    return {"admin": "Hello hacker! ;)"}

@app.post("/api/register")
async def register(data: RegisterRequest):
    name = data.name
    email = data.email
    second_email = data.second_email
    password = data.password

    #email l√©tez√©s√©nek ellen≈ërz√©se
    if is_email_taken(email):
        raise HTTPException(status_code=400, detail="Email already in use")
    
    #email egyez√©s ellen≈ërz√©se
    if email == second_email:
        raise HTTPException(status_code=400, detail="The main and the secondary email can not be the same")

    #vissza√°ll√≠t√≥kulcs gener√°l√°s
    backup_key = gen_backup_key()

    #jelszavak biztons√°gos ment√©se
    password_hash =hash_password(password)
    backup_key_hash = hash_password(backup_key)
    
    #√∫j user elment√©se
    new_user = {
        'name': name,
        'email': email,
        'second_email': second_email,
        'password_hash': password_hash,
        'backup_key_hash': backup_key_hash,
        'algo': DEFAULT_ALGO,
        'has_key': False,
        'key_number': 0,
    } 
    supabase.table('user').insert(new_user).execute()

    #vissza√°ll√≠t√≥kulcs visszaad√°sa
    return {'message': 'Registration successful', 'backup_key': backup_key}

@app.post("/api/login")
async def login(data: LoginRequest, response: Response):
    #felhaszn√°l√≥ lek√©r√©se email alapj√°n
    user = supabase.table("user").select("*").eq("email", data.email).single().execute().data
    
    #felhaszn√°l√≥ √©s a jelsz√≥ ellen≈ërz√©se
    if not user or not verify_password(data.password, user['password_hash']):
        raise HTTPException(status_code=401, detail="Incorrect email or password")

    #session_token be√°ll√≠t√°sa
    set_session_cookie(response, user['id'])
    
    #user_id visszaad√°sa
    return {"message": "Login successful", 'user_id': user['id']}

@app.post("/api/logout")
async def logout(response: Response):
    #session_token t√∂rl√©se
    delete_session_cookie(response)
    return {"message": "Logged out successfully"}

@app.get("/api/user")
async def get_user(request: Request):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))

    #felhaszn√°l√≥ lek√©r√©se
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data

    #user visszaad√°sa ha l√©tezik, k√ºl√∂nben 404
    if user:
        return {
            'id': user['id'],
            'name': user['name'], 
            'email': user['email'], 
            'second_email': user['second_email'], 
            'algo': user['algo'], 
        }
    else: 
        raise HTTPException(status_code=404, detail="User not found")

@app.put("/api/user")
async def edit_user(request: Request, name: Optional[str] = None, email: Optional[EmailStr] = None, second_email: Optional[EmailStr] = None, password: Optional[str] = None, algo: Optional[str] = None):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    update_data = {}

    #m√≥dos√≠tand√≥ adatok kigy≈±jt√©se
    if name:
        update_data["name"] = name
    if email:
        if is_email_taken(request.email, user["id"]):
            raise HTTPException(status_code=400, detail="Email already in use")
        update_data["email"] = email
    if second_email:
        update_data["second_email"] = second_email
    if password:
        hashed_password = hash_password(password)
        update_data["password_hash"] = hashed_password
    if algo:
        update_data["algo"] = algo

    #ha nem √©rkezett egy param√©ter sem
    if not update_data:
        raise HTTPException(status_code=400, detail="No valid fields provided")

    #user friss√≠t√©se
    response = supabase.table("user").update(update_data).eq("id", user["id"]).execute().data
    if not response:
        raise HTTPException(status_code=500, detail="Database update failed")

    return {"message": "User updated successfully"}

@app.get("/api/files")
async def get_files(request: Request,):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))

    #f√°jl adatok lek√©r√©se √©s visszaad√°sa
    result = supabase.table('files').select('*').eq('user_id', user_id).execute().data
    return result

# csak ha √©rv√©nyes a key_hex
@app.delete("/api/files")
async def delete_file(
    request: Request, 
    filename: Optional[str] = "",
    uuid: Optional[str] = ""
):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    
    #t√∂rl√©s filename alapj√°n
    if filename != "":
        #f√°jl lek√©r√©se f√°jln√©v alapj√°n
        result = supabase.table('files').select('*').eq('user_id', user_id).eq('filename', filename).execute().data
        
        #ha l√©tezik a f√°jl az adatb√°zisban
        if result:
            #f√°jl l√©tez√©s√©nek ellen≈ërz√©se a f√°jlrendszerben (uuid alapj√°n)
            file_path = UPLOADS_DIR / str(user_id) / result[0]['uuid']
            if not file_path.exists():
                raise HTTPException(status_code=404, detail="File not found")
            
            #f√°jl t√∂rl√©se az adatb√°zisb√≥l (filename alapj√°n)
            response = supabase.table("files").delete().eq("user_id", user_id).eq("filename", filename).execute()
            if not response:
                raise HTTPException(status_code=500, detail="Failed to delete record from database.")

            #f√°jl t√∂rl√©se a f√°jlrendszerb≈ël (uuid alapj√°n)
            try:
                os.remove(file_path)
                return {"message": f"File '{filename}' deleted successfully."}
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Error deleting file: {str(e)}")
        
        #ha nem l√©tezik a f√°jl az adatb√°zisban
        else:
            raise HTTPException(status_code=404, detail=f"File not found")

    #t√∂rl√©s uuid alapj√°n
    elif uuid != "":
        #f√°jl lek√©r√©se f√°jln√©v alapj√°n
        result = supabase.table('files').select('*').eq('user_id', user_id).eq('uuid', uuid).execute().data

        #ha l√©tezik a f√°jl az adatb√°zisban
        if result:
            #f√°jl l√©tez√©s√©nek ellen≈ërz√©se a f√°jlrendszerben (uuid alapj√°n)
            file_path = UPLOADS_DIR / str(user_id) / uuid
            if not file_path.exists():
                raise HTTPException(status_code=404, detail="File not found")
            
            #f√°jl t√∂rl√©se az adatb√°zisb√≥l (uuid alapj√°n)
            response = supabase.table("files").delete().eq("user_id", user_id).eq("uuid", uuid).execute()
            if not response:
                raise HTTPException(status_code=500, detail="Failed to delete record from database.")

            #f√°jl t√∂rl√©se a f√°jlrendszerb≈ël (uuid alapj√°n)
            try:
                os.remove(file_path)
                return {"message": f"File '{uuid}' deleted successfully."}
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Error deleting file: {str(e)}")
        
        #ha nem l√©tezik a f√°jl az adatb√°zisban
        else:
            raise HTTPException(status_code=404, detail=f"File not found")

    #ha sem filename, sem uuid nem lett megadva
    else:
        raise HTTPException(status_code=400, detail="No parameter given")

# van
@app.post("/api/upload")
async def upload(
    request: Request, 
    encrypted: Optional[bool] = False, 
    key_hex: Optional[str] = "", 
    files: List[UploadFile] = File(...) 
):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    #felhaszn√°l√≥ utvonal√°nak meghat√°roz√°sa, √©s ha kell l√©trehoz√°sa    
    user_directory = f"uploads/{user['id']}"
    if not os.path.exists(user_directory):
        os.makedirs(user_directory)
    
    file_responses = []

    #kapott f√°jlok feldolgoz√°sa
    for file in files:
        #file_path meghat√°roz√°sa (√∫j f√°jln√©v: uuid.kiterjeszt√©s)
        file_uuid = str(uuid.uuid4())
        file_extension = Path(file.filename).suffix
        new_filename = f"{file_uuid}{file_extension}"
        file_path = os.path.join(user_directory, new_filename)

        #filename l√©tez√©s√©nek ellen≈ërz√©se
        result = supabase.table('files').select('*').eq('user_id', user_id).eq('filename', file.filename).execute().data
        if result:
            raise HTTPException(400, "Filename already in use")

        #f√°jl ment√©se
        try:
            #titkos√≠tott f√°jl eset√©n
            if encrypted:
#user-nek nincs kulcsa -> Error (√©s akkor ezt a k√ºl√∂n v√©gponton meg kell csin√°lni f√°jlfelt√∂lt√©s el≈ëtt)
                if not user['has_key']:
                    #kulcsgener√°l√°s
                    key = generate_key()
                    key_hex = key.hex()
                    print(key_hex)
                    #user friss√≠t√©se, kulcs-hash ment√©se
                    """
                    update_response = supabase.table("user").update({"has_key" : True, "secret_key_hash": hash_password(key_hex)}).eq("id", user_id).execute().data
                    if not update_response:
                        raise HTTPException(status_code=400, detail="Failed to update secret key")
                    """
                #user-nek van kulcsa, de nem j√≥ kulcsot adott meg
                elif user['has_key'] and not verify_password(key_hex, user['secret_key_hash']):
                    raise HTTPException(401, 'Invalid secret key')
                #user-nek van kulcsa √©s ezt a kulcsot adta meg

                file_content = await file.read()
                
                #f√°jl titkos√≠t√°sa a felhaszn√°l√≥ kulcs√°val, algoritmus√°val √©s ment√©se a felhaszn√°l√≥ mapp√°j√°ba
                encrypt_file(file_content, file_path, key_hex, user['algo'])
            
            #sima f√°jl eset√©n
            else:
                #f√°jl ment√©se a felhaszn√°l√≥ mapp√°j√°ba
                with open(file_path, "wb") as f:
                    shutil.copyfileobj(file.file, f)
            
            #f√°jl adatainak felt√∂lt√©se az adatb√°zisba
            res = supabase.table('files').insert({"filename": file.filename, "user_id": user_id, "encrypted": encrypted, "uuid": new_filename}).execute()
            if not res:
                    raise HTTPException(400, 'Supabase error while updating files')
            
            #log
            file_responses.append({"file": file.filename, "status": "uploaded", "error": ''})

        except Exception as e:
            file_responses.append({"file": file.filename, "status": "failed", "error": str(e)})

    #logok visszaad√°sa
    return {"message": "Files processed successfully", "files": file_responses}

@app.get("/api/download")
async def download(
    request: Request, 
    filename: str,
    key_hex: Optional[str] = ""
):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    print(key_hex)

    #f√°jl adatainak lek√©r√©se
    result = supabase.table('files').select('*').eq('user_id', user_id).eq('filename', filename).execute().data

    #ha l√©tezik a f√°jl az adatb√°zisban
    if result:
        #f√°jl l√©tez√©s√©nek ellen≈ërz√©se a f√°jlrendszerben
        file_path = UPLOADS_DIR / str(user_id) / result[0]['uuid']
        if not file_path.exists():
            raise HTTPException(status_code=404, detail="File not found")

        #titkos√≠tott f√°jl
        if result[0]['encrypted']:
            #felhaszn√°l√≥ nem adott meg titkos kulcsot
            if key_hex == "":
                raise HTTPException(status_code=400, detail="No key_hex parameter given")
            
            #user-nek van titkos kulcsa, de nem egyezik a felhaszn√°l√≥ √°ltal megadottal
            if user['secret_key_hash'] and not verify_password(key_hex, user['secret_key_hash']):
                raise HTTPException(status_code=401, detail="Invalid secret key")
            #user-nek van titkos kulcs (mivel van titkos√≠tott f√°jlja), √©s megegyezik a felhaszn√°l√≥ √°ltal megadottal
            
            #kititkos√≠t√°s
            try:
                #√°tmeneti √∫tvonal meghat√°roz√°sa
                decrypted_file_path = TEMP_DIR / f"decrypted_{result[0]['uuid']}"
                
                #f√°jl kititkos√≠t√°sa a felhaszn√°l√≥ mapp√°j√°b√≥l az √°tmeneti √∫tvonalra
                decrypt_file(file_path, decrypted_file_path, key_hex, user['algo'])

                #kititkos√≠tott f√°jl visszaad√°sa az √°tmeneti √∫tvonalr√≥l
                return FileResponse(
                    decrypted_file_path,  
                    filename=filename,
                )
            except Exception as e:
                raise HTTPException(status_code=400, detail=f"Decryption failed: {str(e)}")
        
        #sima f√°jl
        else:
            #f√°jl visszaad√°sa a felhaszn√°l√≥ mapp√°j√°b√≥l
            return FileResponse(path=file_path, filename=filename)

@app.get("/api/algos")
async def get_algos():
    #ALGOS visszaad√°sa
    return ALGOS

@app.get("/api/algo")
async def get_user_algo(request: Request):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    #user algoritmus√°nak √©s has_key param√©ter√©nek visszaad√°sa
    return { "algo": user['algo'], "hasSecretKey": user['has_key']}

#van
@app.post("/api/switch-algo")
async def switch_algo(request: Request, algo_request: AlgoChangeRequest):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    #megadott algoritmus ellen≈ërz√©se
    allowed_algos = [item['name'] for item in ALGOS]
    if algo_request.algo not in allowed_algos:
        raise HTTPException(status_code=400, detail="Invalid algorithm")
    
    #titkos√≠tott f√°jlok lek√©r√©se
    encrypted_files = supabase.table('files').select('*').eq('user_id', user_id).eq('encrypted', True).execute().data
    
    #ha user-nek van titkos√≠tott f√°jlja
    if encrypted_files:
        #megadott titkos kulcs helyes
        if verify_password(algo_request.current_sk, user['secret_key_hash']):
            
            #user titkos f√°jljainak kititkos√≠t√°sa
            decrypt_user_files(user_id, algo_request.current_sk, encrypted_files, user['algo'])
            
            #√∫j kulcs gener√°l√°s
            new_key = generate_key()
            new_key_hex = new_key.hex()
            
            #user titkos f√°jljainak √∫jratitkos√≠t√°s az √∫j kulccsal
            encrypt_user_files(user_id, new_key_hex, encrypted_files, algo_request.algo)
            
            #adatb√°zisban a hash √©s az algo friss√≠t√©se
            update_response = supabase.table('user').update({'secret_key_hash': hash_password(new_key_hex), 'algo': algo_request.algo}).eq('id', user_id).execute()
            if not update_response:
                raise HTTPException(status_code=400, detail="Failed to update secret key hash and algo")
            
#√°tmeneti f√°jlok t√∂rl√©se

            #√∫j kulcs visszaad√°sa
            return JSONResponse(content={"new_secret_key": f"${new_key_hex}"})
        
        #megadott titkos kulcs helytelen
        else:
            raise HTTPException(status_code=401, detail="Secret key invalid")
    
    #ha user-nek nincs titkos√≠tott f√°jlja
    else:
        #adatb√°zis friss√≠t√©se
        update_response = supabase.table('user').update({'algo': algo_request.algo}).eq('id', user_id).execute()
        if not update_response:
            raise HTTPException(status_code=500, detail="Failed to update algorithm")

        #log
        return JSONResponse(content={"message": f"Algorithm updated to {algo_request.algo}"})
    

    

    # Van titkos√≠tott f√°jl?
        # ha van => van titkos kulcs => megn√©zz√ºk, hogy egyezik-e a megadottal
            # ha egyezik => kititkos√≠tani mindent, genr√°lni √∫j kulcsot az √∫j alg√≥val, √∫jratitkos√≠tani mindent, firss√≠teni a kulcs hash-t √©s az algot
            # ha nem => Error
        # ha nincs => sim√°n lecser√©lj√ºk az algoritmus, √©s gener√°lunk egy kulcsot

    return {'message': 'Hi :)'}

@app.post("/api/gen-sk")
async def gen_sk(request: Request, current_sk: Optional[str] = ""):
    #autentik√°ci√≥
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    #user-nek m√°r van kulcsa
    if user['has_key']:
        #if current_sk == "" or not verify_password(current_sk, user['secret_key_hash']):
        raise HTTPException(status_code=400, detail="You already have a secret key")
        #ha szeretn√©nk, hogy lehessen √∫j kulcsot k√©rni:
            # titkos√≠tott f√°jlok kititkos√≠t√°sa a r√©gi kulccsal
            # √∫j kulcs gener√°l√°s
            # titkos√≠t√°s az √∫j kulccsal
            # r√©gi kulcs hash√©nek lecser√©l√©se az √∫j hash√©re
    #user-nek m√©g nincs kulcsa
    else:
        #kulcsgener√°l√°s
        key = generate_key()
        key_hex = key.hex()

        #adatb√°zis friss√≠t√©se
        update_response = supabase.table('user').update({'has_key': True, 'secret_key_hash': hash_password(key_hex)}).eq('id', user_id).execute()
        if not update_response:
            raise HTTPException(status_code=500, detail="Failed to update algorithm")
        
        #kulcs visszaad√°sa
        return key_hex



#######
########## DEPRACATED
####
    
@app.post("/api/algo")
async def set_user_algo(request: Request, algo_request: AlgoChangeRequest):
    user_id = authenticate_user(request.cookies.get("session_token"))
    user = supabase.table('user').select('*').eq('id', user_id).single().execute().data
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Ellen≈ërizd, hogy benne van-e a t√°mogatott algoritmusokban
    allowed_algos = [item['name'] for item in ALGOS]
    if algo_request.algo not in allowed_algos:
        raise HTTPException(status_code=400, detail="Invalid algorithm")
    
    # Friss√≠t√©s adatb√°zisban
    update_response = supabase.table('user').update({'algo': algo_request.algo}).eq('id', user_id).execute()
    if not update_response:
        raise HTTPException(status_code=500, detail="Failed to update algorithm")

    return JSONResponse(content={"message": f"Algorithm updated to {algo_request.algo}"})

def generate_unique_filename(file_name: str) -> str:
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    name, ext = os.path.splitext(file_name)
    return f"{name}_{timestamp}{ext}"

def check_file_exists(file_path: str) -> bool:
    return os.path.exists(file_path)


